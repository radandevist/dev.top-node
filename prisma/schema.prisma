// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id            String    @id @unique @default(cuid())
  firstName     String?
  lastName      String
  userName      String    @unique
  email         String    @unique
  password      String
  role          Role      @default(AUTHENTICATED)
  verified      Boolean   @default(false)
  profilePicUrl String?
  posts         Post[]
  comments      Comment[]
  sessions      Session[]
  reactions     Reaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Post {
  id            String    @id @unique @default(cuid())
  title         String
  subtitle      String?
  content       String    @db.Text
  coverImageUrl String?
  slug          String    @unique
  deleted       Boolean   @default(false)
  pinned        Boolean   @default(false)
  published     Boolean   @default(false)
  publishedAt   DateTime  @default(now())
  author        User      @relation(fields: [userId], references: [id])
  comments      Comment[]
  reactions     Reaction[]
  tags          Tag[]
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Comment {
  id        String   @id @unique @default(cuid())
  content   String   @db.Text
  author    User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @unique @default(cuid())
  token     String   @db.VarChar(350)
  userAgent String
  IPAddress String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  AUTHENTICATED
  AUTHOR
  ADMIN
}

model Reaction {
  id        String   @id @unique @default(cuid())
  type      ReactionEnum
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReactionEnum {
  LIKE
  BOOKMARK
  UNICORN
}

model Tag {
  id String   @id @unique @default(cuid())
  name String @unique
  posts Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}